{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CustomerComponent = class CustomerComponent {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/cliente';\n    this.customers = [];\n    this.newCustomer = {\n      id: 0,\n      name: '',\n      tel: '',\n      email: '',\n      lastVisitDate: new Date(),\n      nextVisitDate: new Date(),\n      note: ''\n    };\n    this.selectedCustomerId = null;\n  }\n  ngOnInit() {\n    this.getCustomers();\n  }\n  getCustomers() {\n    this.http.get(this.apiUrl).subscribe(customers => {\n      this.customers = customers;\n    });\n  }\n  saveCustomer() {\n    this.http.post(this.apiUrl, this.newCustomer).subscribe(customer => {\n      this.customers.push(customer);\n      this.newCustomer = {\n        id: 0,\n        name: '',\n        tel: '',\n        email: '',\n        lastVisitDate: new Date(),\n        nextVisitDate: new Date(),\n        note: ''\n      };\n    });\n  }\n  deleteCustomer(id) {\n    this.selectedCustomerId = id;\n    if (confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\n      this.performDelete();\n    } else {\n      this.selectedCustomerId = null;\n      console.log(\"Eliminación cancelOpticaCentroCrud-Frontendlada\");\n    }\n  }\n  performDelete() {\n    if (this.selectedCustomerId !== null) {\n      this.http.delete(`${this.apiUrl}/${this.selectedCustomerId}`).subscribe(() => {\n        this.customers = this.customers.filter(customer => customer.id !== this.selectedCustomerId);\n        this.getCustomers(); // Actualizar la lista de clientes después de la eliminación\n      });\n\n      this.selectedCustomerId = null;\n      console.log(\"Cliente eliminado\");\n    }\n  }\n};\nCustomerComponent = __decorate([Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})], CustomerComponent);\nexport { CustomerComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAmB1C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAe5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAdxB,WAAM,GAAG,mCAAmC;IAC5C,cAAS,GAAe,EAAE;IAC1B,gBAAW,GAAa;MACtBC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,EAAE;MACPC,KAAK,EAAE,EAAE;MACTC,aAAa,EAAE,IAAIC,IAAI,EAAE;MACzBC,aAAa,EAAE,IAAID,IAAI,EAAE;MACzBE,IAAI,EAAE;KACP;IAGD,uBAAkB,GAAkB,IAAI;EACA;EAExCC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV,IAAI,CAACV,IAAI,CAACW,GAAG,CAAa,IAAI,CAACC,MAAM,CAAC,CAACC,SAAS,CAACC,SAAS,IAAG;MAC3D,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC,CAAC;EACJ;EAEAC,YAAY;IACV,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAW,IAAI,CAACJ,MAAM,EAAE,IAAI,CAACK,WAAW,CAAC,CAACJ,SAAS,CAACK,QAAQ,IAAG;MAC3E,IAAI,CAACJ,SAAS,CAACK,IAAI,CAACD,QAAQ,CAAC;MAC7B,IAAI,CAACD,WAAW,GAAG;QACjBhB,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,EAAE;QACRC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,aAAa,EAAE,IAAIC,IAAI,EAAE;QACzBC,aAAa,EAAE,IAAID,IAAI,EAAE;QACzBE,IAAI,EAAE;OACP;IACH,CAAC,CAAC;EACJ;EAEAY,cAAc,CAACnB,EAAU;IACvB,IAAI,CAACoB,kBAAkB,GAAGpB,EAAE;IAC5B,IAAIqB,OAAO,CAAC,oDAAoD,CAAC,EAAE;MACjE,IAAI,CAACC,aAAa,EAAE;KACrB,MAAM;MACL,IAAI,CAACF,kBAAkB,GAAG,IAAI;MAC9BG,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;EAElE;EAEAF,aAAa;IACX,IAAI,IAAI,CAACF,kBAAkB,KAAK,IAAI,EAAE;MACpC,IAAI,CAACrB,IAAI,CAAC0B,MAAM,CAAO,GAAG,IAAI,CAACd,MAAM,IAAI,IAAI,CAACS,kBAAkB,EAAE,CAAC,CAACR,SAAS,CAAC,MAAK;QACjF,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACa,MAAM,CAACT,QAAQ,IAAIA,QAAQ,CAACjB,EAAE,KAAK,IAAI,CAACoB,kBAAkB,CAAC;QAC3F,IAAI,CAACX,YAAY,EAAE,CAAC,CAAC;MACvB,CAAC,CAAC;;MACF,IAAI,CAACW,kBAAkB,GAAG,IAAI;MAC9BG,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;EAEpC;CAED;AA/DY3B,iBAAiB,eAL7BD,SAAS,CAAC;EACT+B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWhC,iBAAiB,CA+D7B;SA/DYA,iBAAiB","names":["Component","CustomerComponent","constructor","http","id","name","tel","email","lastVisitDate","Date","nextVisitDate","note","ngOnInit","getCustomers","get","apiUrl","subscribe","customers","saveCustomer","post","newCustomer","customer","push","deleteCustomer","selectedCustomerId","confirm","performDelete","console","log","delete","filter","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/marco/Documents/Developer/opticaCentro/opticaCentro/src/app/home/customer.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n\ninterface Customer {\n  id: number;\n  name: string;\n  tel: string;\n  email: string;\n  lastVisitDate: Date;\n  nextVisitDate: Date;\n  note: string;\n}\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n  apiUrl = 'http://localhost:8080/api/cliente';\n  customers: Customer[] = [];\n  newCustomer: Customer = {\n    id: 0,\n    name: '',\n    tel: '',\n    email: '',\n    lastVisitDate: new Date(),\n    nextVisitDate: new Date(),\n    note: ''\n  };\n\n  \n  selectedCustomerId: number | null = null; \n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.getCustomers();\n  }\n\n  getCustomers(): void {\n    this.http.get<Customer[]>(this.apiUrl).subscribe(customers => {\n      this.customers = customers;\n    });\n  }\n\n  saveCustomer(): void {\n    this.http.post<Customer>(this.apiUrl, this.newCustomer).subscribe(customer => {\n      this.customers.push(customer);\n      this.newCustomer = {\n        id: 0,\n        name: '',\n        tel: '',\n        email: '',\n        lastVisitDate: new Date(),\n        nextVisitDate: new Date(),\n        note: ''\n      };\n    });\n  }\n\n  deleteCustomer(id: number): void {\n    this.selectedCustomerId = id;\n    if (confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\n      this.performDelete();\n    } else {\n      this.selectedCustomerId = null;\n      console.log(\"Eliminación cancelOpticaCentroCrud-Frontendlada\");\n    }\n  }\n\n  performDelete(): void {\n    if (this.selectedCustomerId !== null) {\n      this.http.delete<void>(`${this.apiUrl}/${this.selectedCustomerId}`).subscribe(() => {\n        this.customers = this.customers.filter(customer => customer.id !== this.selectedCustomerId);\n        this.getCustomers(); // Actualizar la lista de clientes después de la eliminación\n      });\n      this.selectedCustomerId = null;\n      console.log(\"Cliente eliminado\");\n    }\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}